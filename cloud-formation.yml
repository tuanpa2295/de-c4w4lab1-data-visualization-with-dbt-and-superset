AWSTemplateFormatVersion: 2010-09-09
Parameters:
  ProjectPrefix:
    Type: String
    Description: Project prefix for naming resources
    Default: de-c4w4lab1

  AWSRegion:
    Type: String
    Description: Default AWS Region
    Default: us-east-1

  VSCodeRoleName:
    Type: String
    Description: Role name for the VSCode Instance
    Default: VSCodeInstanceRole

  PostgresMasterUsername:
    Type: String
    Description: A user name for RDS database instance.
    MinLength: 1
    MaxLength: 16
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    Default: postgresuser
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters.

  PostgresMasterUserPassword:
    Type: String
    Description: >-
      A user password for RDS database instance default password Awsadmin123. (8
      characters minimum, 41 characters maximum.)
    NoEcho: true
    MinLength: 8
    MaxLength: 41
    AllowedPattern: '[a-zA-Z0-9]*'
    Default: adminpwrd
    ConstraintDescription: must contain only alphanumeric characters.

  PostgresAllocatedStorage:
    Default: '20'
    Description: The size of the database (GiB)
    Type: Number
    MinValue: '20'
    MaxValue: '65536'
    ConstraintDescription: must be between 20 and 65536 GiB.
  
  PostgresDBName:
    Type: String
    Default: 'postgres'

  VPCCIDR:
    Type: String
    Description: CIDR of VPC. IPv4 address range in CIDR notation.
    Default: 10.0.0.0/16
  PublicSubnetCIDR:
    Type: String
    Description: CIDR of a public subnet. IPv4 address range in CIDR notation.
    Default: 10.0.1.0/24
  PrivateSubnetACIDR:
    Type: String
    Description: CIDR of a private subnet A. IPv4 address range in CIDR notation.
    Default: 10.0.3.0/24
  PrivateSubnetBCIDR:
    Type: String
    Description: CIDR of a private subnet B. IPv4 address range in CIDR notation.
    Default: 10.0.4.0/24

  PublicBucketName:
    Type: String
    Description: Public bucket name for assets.
    Default: dlai-data-engineering

  PublicVsCodeDockerRepo:
    Description: ECR repo with the vscode docker image
    Type: String
    Default: public.ecr.aws/deeplearning-ai/dlai-de-code-server:latest

  PublicBucketVSCodeServiceKey:
    Type: String
    Description: Public bucket key for postgres load zip file.
    Default: labs/cfn_dependencies/c4w4lab1/docker_vscode_service.service
  
  PublicBucketSupersetServiceKey:
    Type: String
    Description: Public bucket key for postgres load zip file.
    Default: labs/cfn_dependencies/c4w4lab1/docker_superset_service.service

  PublicBucketPostgresLayerKey:
    Type: String
    Description: Public bucket key for dependencies file.
    Default: labs/cfn_dependencies/c4w4lab1/lambda_layer_dependencies_p38.zip

  PublicBucketPostgresDDLObjectKey:
    Type: String
    Description: Public bucket key for sql file.
    Default: labs/cfn_dependencies/c4w4lab1/classicmodels.sql
  
  PublicBucketPostgresLambdaKey:
    Type: String
    Description: Public bucket key for docker compose yaml file.
    Default: labs/cfn_dependencies/c4w4lab1/postgres_load.py.zip

  PublicBucketLambdaKey:
    Type: String
    Description: Public bucket key for lab clone lambda zip file.
    Default: labs/cfn_dependencies/c4w4lab1/policy_clone.zip

  PublicBucketPolicyPath:
    Type: String
    Description: Public bucket key for lab policy file.
    Default: labs/cfn_dependencies/c4w4lab1/lab.policy

  PublicBucketLabContentKey:
    Type: String
    Description: Public bucket key for lab_content folder.
    Default: labs/c4w4lab1-161502

  PostgresLambdaRuntime:
    Type: String
    Description: Postgres Lambda function Runtime
    Default: python3.8

  PublicBucketLayerKey:
    Type: String
    Description: Public bucket key for dependencies file.
    Default: labs/cfn_dependencies/c4w4lab1/lambda_layer_dependencies_p312.zip

  Runtime:
    Type: String
    Description: Lambda function Runtime
    Default: python3.12

  Timeout:
    Type: Number
    Description: Lambda function Timeout
    Default: 300
  LatestAmiId:
    Description: The latest Amazon Linux 2023 AMI from the Parameter Store
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'
  InstanceType:
    Description: The EC2 instance type
    Type: String
    Default: t3.large
    AllowedValues:
      - t3.large
  KeyName:
    Type: String
    Default: KeyName
  SupersetPort:
    Type: Number
    Description: Superset port
    Default: 8088
  VsCodePort:
    Type: Number
    Description: VS Code port
    Default: 8443
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
      - Label:
          default: Database Configuration
        Parameters:
          - PostgresMasterUsername
          - PostgresMasterUserPassword
      - Label:
          default: Network Configuration
        Parameters:
          - VPCCIDR
          - PublicSubnetCIDR
          - PrivateSubnetACIDR
          - PrivateSubnetBCIDR
Resources:
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Ref VPCCIDR
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Sub '${ProjectPrefix}'
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Name
          Value: !Sub '${ProjectPrefix}-igw'
  InternetGatewayAttachment:
    DependsOn:
      - InternetGateway
      - VPC
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC
  PublicSubnet:
    DependsOn: VPC
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select 
        - '0'
        - !GetAZs ''
      CidrBlock: !Ref PublicSubnetCIDR
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${ProjectPrefix}-public-subnet'
  PrivateSubnetA:
    DependsOn: VPC
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select 
        - '0'
        - !GetAZs ''
      CidrBlock: !Ref PrivateSubnetACIDR
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${ProjectPrefix}-private-subnet-a'
  PrivateSubnetB:
    DependsOn: VPC
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select 
        - '1'
        - !GetAZs ''
      CidrBlock: !Ref PrivateSubnetBCIDR
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${ProjectPrefix}-private-subnet-b'
  
  InternetGatewayRoute:
    DependsOn:
      - InternetGatewayAttachment
      - PublicRouteTable
    Type: 'AWS::EC2::Route'
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicRouteTable
  PublicRouteTable:
    DependsOn: VPC
    Type: 'AWS::EC2::RouteTable'
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${ProjectPrefix}-public-routetable'
      VpcId: !Ref VPC
  PublicSubnetRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable
  PrivateSubnetARouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnetA
      RouteTableId: !Ref PrivateRouteTable
  PrivateSubnetBRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnetB
      RouteTableId: !Ref PrivateRouteTable
  NatGatewayRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway
  PrivateRouteTable:
    DependsOn: VPC
    Type: 'AWS::EC2::RouteTable'
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${ProjectPrefix}-private-routetable'
      VpcId: !Ref VPC
  NatGateway:
    DependsOn:
      - NATGatewayEIPA
      - PublicSubnet      
    Type: 'AWS::EC2::NatGateway'
    Properties:
      AllocationId: !GetAtt NATGatewayEIPA.AllocationId
      SubnetId: !Ref PublicSubnet
      Tags:
        - Key: Name
          Value: !Sub '${ProjectPrefix}-natgw'
  NATGatewayEIPA:
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc
  DefaultVPCSecurityGroup:
    DependsOn: VPC
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Default Security Group for the VPC.
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${ProjectPrefix}-sg'
  DefaultVPCSecurityGroupSelfRefIngress:
    DependsOn: DefaultVPCSecurityGroup
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      SourceSecurityGroupId: !Ref DefaultVPCSecurityGroup
      IpProtocol: '-1'
      GroupId: !Ref DefaultVPCSecurityGroup 
  DBIngressRule:
    DependsOn: DefaultVPCSecurityGroup
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      FromPort: "5432"
      ToPort: "5432"
      GroupId: !Ref DefaultVPCSecurityGroup
      IpProtocol: tcp
      CidrIp: "0.0.0.0/0"

  LambdaExecutionSecurityGroup:
    DependsOn: VPC
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Default Security Group for the VPC.
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${ProjectPrefix}-lambda-sg'
  
  LambdaSGSelfRefIngress:
    DependsOn: LambdaExecutionSecurityGroup
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      SourceSecurityGroupId: !Ref LambdaExecutionSecurityGroup
      IpProtocol: '-1'
      GroupId: !Ref LambdaExecutionSecurityGroup 

  LambdaSGIngressRule:
    DependsOn: LambdaExecutionSecurityGroup
    Type: AWS::EC2::SecurityGroupIngress
    Properties:      
      GroupId: !Ref LambdaExecutionSecurityGroup
      IpProtocol: -1
      CidrIp: "0.0.0.0/0"

  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup    
    Properties:
      GroupDescription: EC2 Security Group
      VpcId: !Ref VPC  
      Tags:
        - Key: Name
          Value: !Sub '${ProjectPrefix}-ec2-sg'
  EC2SecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref EC2SecurityGroup
      CidrIp: 0.0.0.0/0
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22

  EC2SecurityGroupIngressHTTPS:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref EC2SecurityGroup
      CidrIp: 0.0.0.0/0
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443    
   
  PostgresLambdaLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      CompatibleArchitectures:
        - arm64
      CompatibleRuntimes:
        - !Ref PostgresLambdaRuntime
      Content:
        S3Bucket: !Ref PublicBucketName
        S3Key: !Ref PublicBucketPostgresLayerKey
      Description: Lambda layer with dependencies to insert data into postgres DBs
      LayerName: !Sub ${ProjectPrefix}-lambda-layer-postgres

  PostgresSubnetGroup:
    Type: 'AWS::RDS::DBSubnetGroup'
    Properties:
      DBSubnetGroupDescription: Subnet available for the DB Instance
      SubnetIds:
        - !Ref PrivateSubnetA
        - !Ref PrivateSubnetB
    DependsOn:
      - PrivateSubnetA
      - PrivateSubnetB
  
  PostgresDB:
    DependsOn:
      - DefaultVPCSecurityGroup
      - PostgresSubnetGroup
      - PrivateSubnetA      
    Type: 'AWS::RDS::DBInstance'
    DeletionPolicy: Delete
    Properties:
      DBInstanceIdentifier: !Sub '${ProjectPrefix}-rds'
      DBName: dev
      DBInstanceClass: db.t3.small
      AllocatedStorage: !Ref PostgresAllocatedStorage
      AvailabilityZone: !GetAtt
        - PrivateSubnetA
        - AvailabilityZone
      DBSubnetGroupName: !Ref PostgresSubnetGroup
      Engine: postgres
      EngineVersion: 15.5
      MasterUsername: !Ref PostgresMasterUsername
      MasterUserPassword: !Ref PostgresMasterUserPassword
      MultiAZ: false
      PubliclyAccessible: false
      BackupRetentionPeriod: 0
      VPCSecurityGroups:
        - !Ref DefaultVPCSecurityGroup
      Tags:
        - Key: Project
          Value: !Ref ProjectPrefix
  
  PostgresLoadFunction:
    DependsOn:
      - PostgresLambdaLayer
      - PostgresDB      
    Type: 'AWS::Lambda::Function'
    Properties:
      Environment:
        Variables:
          DBHOST: !GetAtt
            - PostgresDB
            - Endpoint.Address
          DBPORT: !GetAtt
            - PostgresDB
            - Endpoint.Port
          DBNAME: !Ref PostgresDBName
          DBUSER: !Ref PostgresMasterUsername
          DBPASSWORD: !Ref PostgresMasterUserPassword
          BUCKET_NAME: !Ref PublicBucketName
          OBJECT_KEY: !Ref PublicBucketPostgresDDLObjectKey
      Code:
        S3Bucket: !Ref PublicBucketName
        S3Key: !Ref PublicBucketPostgresLambdaKey
      FunctionName: !Sub '${ProjectPrefix}-postgres-lambda-function'
      Handler: postgres_load.lambda_handler
      Layers:
        - !Ref PostgresLambdaLayer
      Runtime: !Ref PostgresLambdaRuntime
      Role: !GetAtt FunctionRole.Arn
      Timeout: !Ref Timeout
      VpcConfig:
        SecurityGroupIds:
          - !Ref DefaultVPCSecurityGroup
        SubnetIds:
          - !Ref PrivateSubnetA

  FunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess        

  CFPostgresLambdaExecution:
    DependsOn:
      - PostgresLoadFunction
    Type: 'Custom::CFPostgresLambdaExecution'
    Properties:
      ServiceToken: !GetAtt PostgresLoadFunction.Arn
      DeletionPolicy: Delete
  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: EC2 Security Group
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${ProjectPrefix}-ec2-sg'
  EC2SecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref EC2SecurityGroup
      CidrIp: 0.0.0.0/0
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
  EC2SecurityGroupIngressAPI:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref EC2SecurityGroup
      CidrIp: 0.0.0.0/0
      IpProtocol: tcp
      FromPort: 8080
      ToPort: 8080
  EC2SecurityGroupIngressHTTPS:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref EC2SecurityGroup
      CidrIp: 0.0.0.0/0
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
  EC2SecurityGroupIngressSuperset:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref EC2SecurityGroup
      CidrIp: 0.0.0.0/0
      IpProtocol: tcp
      FromPort: !Ref SupersetPort
      ToPort: !Ref SupersetPort
  EC2SecurityGroupIngressVsCode:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref EC2SecurityGroup
      CidrIp: 0.0.0.0/0
      IpProtocol: tcp
      FromPort: !Ref VsCodePort
      ToPort: !Ref VsCodePort
  EC2SecurityGroupIngressJupyter:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref EC2SecurityGroup
      CidrIp: 0.0.0.0/0
      IpProtocol: tcp
      FromPort: 8888
      ToPort: 8888
  EC2KeyPair:
    Type: AWS::EC2::KeyPair
    Properties:
      KeyName: !Sub '${ProjectPrefix}-ec2-keypair'

  StackInstance:
    DependsOn:
      - VSCodeEC2InstanceProfile
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref LatestAmiId
      InstanceType: !Ref InstanceType
      KeyName: !Ref EC2KeyPair
      IamInstanceProfile: !Ref VSCodeEC2InstanceProfile
      BlockDeviceMappings:
        - DeviceName: "/dev/xvda"
          Ebs:
            VolumeSize: "30"
      NetworkInterfaces:
        - DeviceIndex: "0"
          SubnetId: !Ref PublicSubnet
          GroupSet:
            - !Ref EC2SecurityGroup
      Tags:
        - Key: Name
          Value: !Sub ${ProjectPrefix}-stack-instance
        - Key: Project
          Value: !Ref ProjectPrefix
      UserData: {
                  "Fn::Base64": {"Fn::Join": ["",
                      ["#!/bin/bash\n",
                      "set -ex\n",
                      "export VSCODE_DOCKER_REPO=", { "Ref": "PublicVsCodeDockerRepo" }, "\n",
                      "echo $VSCODE_DOCKER_REPO\n",
                      "sudo aws s3 cp s3://",{ "Ref": "PublicBucketName" },"/",{ "Ref":"PublicBucketVSCodeServiceKey" }," /etc/systemd/system/docker_vscode_service.service\n",
                      "sudo aws s3 cp s3://",{ "Ref": "PublicBucketName" },"/",{ "Ref":"PublicBucketSupersetServiceKey" }," /etc/systemd/system/docker_superset_service.service\n",
                      "sudo sed -i 's|<VSCODE_DOCKER_REPO>|'\"$VSCODE_DOCKER_REPO\"'|g' /etc/systemd/system/docker_vscode_service.service \n",
                      "sudo mkdir -p /home/ec2-user/data\n",
                      "sudo aws s3 sync s3://",{ "Ref": "PublicBucketName" },"/",{ "Ref":"PublicBucketLabContentKey" }," /home/ec2-user/data\n",
                      "sudo chown -R 1000:1000 /home/ec2-user/data\n",
                      "sudo chmod -R 775 /home/ec2-user/data\n",
                      "sudo yum update -y\n",
                      "sudo yum install -y docker git\n",
                      "sudo service docker start\n",
                      "sudo usermod -a -G docker ec2-user\n",
                      "sudo mkdir -p /usr/local/lib/docker/cli-plugins\n",
                      "sudo curl -SL https://github.com/docker/compose/releases/download/v2.24.7/docker-compose-linux-x86_64 -o /usr/local/lib/docker/cli-plugins/docker-compose\n",
                      "sudo chmod +x /usr/local/lib/docker/cli-plugins/docker-compose\n",
                      "echo docker compose has been installed\n",                      
                      "sudo chmod 644 /etc/systemd/system/docker_vscode_service.service\n",
                      "sudo systemctl daemon-reload\n",
                      "sudo systemctl enable docker_vscode_service.service\n",
                      "sudo systemctl start docker_vscode_service.service\n",                      
                      "git clone https://github.com/apache/superset.git\n",                      
                      "sudo chmod 644 /etc/systemd/system/docker_superset_service.service\n",
                      "sudo systemctl daemon-reload\n",
                      "sudo systemctl enable docker_superset_service.service\n",
                      "sudo systemctl start docker_superset_service.service\n",
                      "echo Superset service is running\n",
                      ]
                    ]
                  }
                }
  StackInstanceEIP:
    Type: "AWS::EC2::EIP"
    Properties:
      InstanceId: !Ref StackInstance

  LambdaLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      CompatibleArchitectures:
        - arm64
      CompatibleRuntimes:
        - python3.12
      Content:
        S3Bucket: !Ref PublicBucketName
        S3Key: !Ref PublicBucketLayerKey
      Description: Lambda layer to setup Vscode instance profile
      LayerName: !Sub ${ProjectPrefix}-lambda-layer

  LambdaRoleVSCodeSetup:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ProjectPrefix}-lambda-role-vscode-setup"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service:
                - lambda.amazonaws.com
      Policies:
        - PolicyName: VSCodeInstanceRolePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: CreateLogGroup
                Effect: Allow
                Action: logs:CreateLogGroup
                Resource: "arn:aws:logs:*:*:*"
              - Sid: LogStreamMgmt
                Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "arn:aws:logs:*:*:log-group:/aws/lambda/${ProjectPrefix}*:*"
              - Sid: IAMRoleMgmt
                Effect: Allow
                Action:
                  - iam:CreateRole
                  - iam:TagRole
                  - iam:PutRolePolicy
                  - iam:DeleteRole
                  - iam:DeleteRolePolicy
                  - iam:GetRole
                  - iam:GetRolePolicy
                Resource: !Sub "arn:aws:iam::*:role/${VSCodeRoleName}"

  LambdaFunctionVSCodeRole:
    DependsOn:
      - LambdaLayer
    Type: AWS::Lambda::Function
    Properties:
      Environment:
        Variables:
          PROJECT_VALUE: !Ref ProjectPrefix
          CLONE_ROLE_NAME: !Ref VSCodeRoleName
          BUCKET_NAME: !Ref PublicBucketName
          POLICY_PATH: !Ref PublicBucketPolicyPath
      Code:
        S3Bucket: !Ref PublicBucketName
        S3Key: !Ref PublicBucketLambdaKey
      FunctionName: !Sub "${ProjectPrefix}-lambda-function-lab-setup"
      Handler: policy_clone.lambda_handler
      Layers:
        - !Ref LambdaLayer
      Runtime: !Ref Runtime
      Role: !GetAtt LambdaRoleVSCodeSetup.Arn
      Timeout: !Ref Timeout

  CRVSCodeRoleWithLambda:
    DependsOn:
      - LambdaFunctionVSCodeRole
    Type: Custom::CRVSCodeRoleWithLambda
    Properties:
      ServiceToken: !GetAtt LambdaFunctionVSCodeRole.Arn      
    DeletionPolicy: Delete

  VSCodeEC2InstanceProfile:
    DependsOn:
      - CRVSCodeRoleWithLambda
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      InstanceProfileName: VSCodeEC2InstanceProfile
      Roles:
        - !Ref VSCodeRoleName
Outputs:
  PostgresJDBCConnectionString:
    Description: JDBC connection string for Postgres database
    Value: !Join
      - ''
      - - 'jdbc:mysql://'
        - !GetAtt
          - PostgresDB
          - Endpoint.Address
        - ':'
        - !GetAtt
          - PostgresDB
          - Endpoint.Port
  PostgresEndpoint:
    Description: RDS endpoint for Postgres DB instance
    Value: !GetAtt PostgresDB.Endpoint.Address
  PostgresUser:
    Description: user name for Postgres DB instance
    Value: !Ref PostgresMasterUsername
  AWSRegion:
    Description: This is the current AWS Region for this tutorial
    Value: !Sub '${AWS::Region}'
  AWSAccount:
    Description: This is the current AWS Account for this tutorial
    Value: !Sub '${AWS::AccountId}'
  SupersetEndpoint:
    Description: This is the Endpoint of the Superset service
    Value: !Join
      - ''
      - - 'http://'
        - !Ref StackInstanceEIP
        - ':'
        - !Ref SupersetPort
  VSCodeEndpoint:
    Description: This is the Endpoint of the Vs Code service
    Value: !Join
      - ''
      - - 'http://'
        - !Ref StackInstanceEIP
        - ':'
        - !Ref VsCodePort
